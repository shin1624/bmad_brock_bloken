name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # ========================================
  # CI: Continuous Integration Tests
  # ========================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: false

      - name: TypeScript type check
        run: npm run typecheck
        continue-on-error: false

      - name: Run unit tests
        run: npm run test:run
        continue-on-error: false

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e
        timeout-minutes: 10
        continue-on-error: false

      - name: Upload test coverage
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # ========================================
  # Build: Create production artifacts
  # ========================================
  build:
    name: Build Production
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
          # Add production environment variables here
          # VITE_API_URL: ${{ secrets.VITE_API_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 30

      - name: Check build size
        run: |
          echo "Build size report:"
          du -sh dist/
          find dist -type f -name "*.js" -exec ls -lh {} \;

  # ========================================
  # Deploy: Deploy to hosting platform
  # ========================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deployment.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      # ========================================
      # GitHub Pages Deployment Option
      # ========================================
      - name: Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
          cname: '' # Add custom domain if needed

      # ========================================
      # Alternative: Vercel Deployment
      # Uncomment and configure if using Vercel
      # ========================================
      # - name: Deploy to Vercel
      #   id: deployment
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      #   run: |
      #     npm i -g vercel
      #     vercel --prod --token $VERCEL_TOKEN

      # ========================================
      # Alternative: Netlify Deployment
      # Uncomment and configure if using Netlify
      # ========================================
      # - name: Deploy to Netlify
      #   id: deployment
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      #   run: |
      #     npm i -g netlify-cli
      #     netlify deploy --prod --dir=dist

      - name: Post deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi

  # ========================================
  # Notifications: Send status updates
  # ========================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Prepare notification message
        id: message
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "status=✅ Deployment successful" >> $GITHUB_OUTPUT
            echo "color=28a745" >> $GITHUB_OUTPUT
          elif [ "${{ needs.test.result }}" == "failure" ]; then
            echo "status=❌ Tests failed" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
          elif [ "${{ needs.build.result }}" == "failure" ]; then
            echo "status=❌ Build failed" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
          else
            echo "status=❌ Deployment failed" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
          fi

      # ========================================
      # Discord Webhook Notification
      # Uncomment and configure if using Discord
      # ========================================
      # - name: Send Discord notification
      #   if: secrets.DISCORD_WEBHOOK != ''
      #   env:
      #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      #   run: |
      #     curl -H "Content-Type: application/json" \
      #          -X POST \
      #          -d '{
      #            "embeds": [{
      #              "title": "GitHub Actions - ${{ steps.message.outputs.status }}",
      #              "description": "Repository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}",
      #              "color": "${{ steps.message.outputs.color }}",
      #              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
      #            }]
      #          }' \
      #          $DISCORD_WEBHOOK

      # ========================================
      # Slack Webhook Notification
      # Uncomment and configure if using Slack
      # ========================================
      # - name: Send Slack notification
      #   if: secrets.SLACK_WEBHOOK != ''
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #   run: |
      #     curl -X POST -H 'Content-type: application/json' \
      #          --data '{
      #            "text": "${{ steps.message.outputs.status }}",
      #            "attachments": [{
      #              "color": "${{ steps.message.outputs.color }}",
      #              "fields": [
      #                {"title": "Repository", "value": "${{ github.repository }}", "short": true},
      #                {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
      #                {"title": "Commit", "value": "${{ github.sha }}", "short": false}
      #              ]
      #            }]
      #          }' \
      #          $SLACK_WEBHOOK