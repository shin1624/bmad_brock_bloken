{
  "testModules": [
    {
      "moduleId": "/Users/yoshikawashin/project/bmad_brock_bloken/src/utils/levelExportImport.test.ts",
      "tests": [
        {
          "name": "should generate a level code string",
          "fullName": "Level Export/Import Utils > generateLevelCode > should generate a level code string",
          "state": "passed"
        },
        {
          "name": "should generate URL-safe codes",
          "fullName": "Level Export/Import Utils > generateLevelCode > should generate URL-safe codes",
          "state": "passed"
        },
        {
          "name": "should compress data effectively",
          "fullName": "Level Export/Import Utils > generateLevelCode > should compress data effectively",
          "state": "passed"
        },
        {
          "name": "should include a checksum",
          "fullName": "Level Export/Import Utils > generateLevelCode > should include a checksum",
          "state": "passed"
        },
        {
          "name": "should decode a valid level code",
          "fullName": "Level Export/Import Utils > decodeLevelCode > should decode a valid level code",
          "state": "passed"
        },
        {
          "name": "should throw error on invalid format",
          "fullName": "Level Export/Import Utils > decodeLevelCode > should throw error on invalid format",
          "state": "passed"
        },
        {
          "name": "should throw error on corrupted data",
          "fullName": "Level Export/Import Utils > decodeLevelCode > should throw error on corrupted data",
          "state": "passed"
        },
        {
          "name": "should throw error on invalid base64",
          "fullName": "Level Export/Import Utils > decodeLevelCode > should throw error on invalid base64",
          "state": "passed"
        },
        {
          "name": "should validate decoded level structure",
          "fullName": "Level Export/Import Utils > decodeLevelCode > should validate decoded level structure",
          "state": "passed"
        },
        {
          "name": "should maintain data integrity through encode/decode cycle",
          "fullName": "Level Export/Import Utils > Level code round-trip > should maintain data integrity through encode/decode cycle",
          "state": "passed"
        },
        {
          "name": "should handle levels with minimal data",
          "fullName": "Level Export/Import Utils > Level code round-trip > should handle levels with minimal data",
          "state": "passed"
        },
        {
          "name": "should handle levels with large grids",
          "fullName": "Level Export/Import Utils > Level code round-trip > should handle levels with large grids",
          "state": "passed"
        },
        {
          "name": "should return the byte size of a level code",
          "fullName": "Level Export/Import Utils > getLevelCodeSize > should return the byte size of a level code",
          "state": "passed"
        },
        {
          "name": "should return true for small level codes",
          "fullName": "Level Export/Import Utils > isLevelCodeShareable > should return true for small level codes",
          "state": "passed"
        },
        {
          "name": "should check against URL size limit",
          "fullName": "Level Export/Import Utils > isLevelCodeShareable > should check against URL size limit",
          "state": "passed"
        },
        {
          "name": "should create a minimal version of a level",
          "fullName": "Level Export/Import Utils > createMinimalLevel > should create a minimal version of a level",
          "state": "passed"
        },
        {
          "name": "should optimize block data",
          "fullName": "Level Export/Import Utils > createMinimalLevel > should optimize block data",
          "state": "passed"
        },
        {
          "name": "should produce smaller codes",
          "fullName": "Level Export/Import Utils > createMinimalLevel > should produce smaller codes",
          "state": "passed"
        }
      ]
    }
  ],
  "unhandledErrors": [],
  "reason": "passed"
}